(load-file "SICP.clj")
(same-parity 1 2 3 4 5 6 7)
(load-file "SICP.clj")
(same-parity 1 2 3 4 5 6 7)
(load-file "SICP.clj")
(same-parity 1 2 3 4 5 6 7)
(same-parity 1 2 3 4 5 6)
(load-file "SICP.clj")
(same-parity 1 2 3 4 5 6 7)
(same-parity 1 2 3 4 5 6)
(same-parity 2 3 4 5 6 7)
(map square (list 1 2 3 4 5))
(def thing (cons 1 2))
(cons 11 2)
(print (cons 1 2 ))
(cons 11 nil)
(cons 11 12)
(cons 11 (cons 12 nil))
(cons (cons 11 nil) (cons 12 nil))
(def thing (cons 11 nil))
thing
(rest thing)
(= (rest thing) nil)
(load-file "SICP.clj")
(square-list-2 (list 1 2 3 4 5 6))
(square-list-1 (list 1 2 3 4 5 6))
(for square (list 1 2 3 4))
(for (list 1 2 3 4) square)
(square (for (list 1 2 3 4)))
quit
(for-each #(display x) (list 1 2 3))
(for [x (list 1 2 3)] (square x))
(load-file "SICP.clj")
(for [x (list 1 2 3)] (square x))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(range 10)
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(flatten (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(load-file "SICP.clj")
(square-list-3 (list 1 2 3 4 5))
(def thing (cons (list 1 2) (list 3 4)))
thing
(cons (list 1 2 3) (list 4 5))
(cons 1 (cons 2 (cons 3 (cons 4 nil))))
(cons 1 2)
(count-leaves (cons (list 1 2 3) (list 4 5)))
(length (cons (list 1 2 3) (list 4 5)))
(first (list ))
(load-file "SICP.clj")
(for-each square (list 1 2 3 4))
(for-each #(println (square %)) (list 1 2 3 4))
(rest (list 1))
(load-file "SICP.clj")
(for-each #(println (square %)) (list 1 2 3 4))
(first (rest (list 1)))
(first (list 1))
(rest 1)
(rest (rest (list 1)))
(first (rest (list 1)))
(first (first (list 1 2)))
(first (list 1 2))
(def x (list (list 1 2) 3 4))
x
(list (first x))
(rest (list (first x)))
(first (rest (list (first x))))
(load-file "SICP.clj")
(deep-reverse x)
x
(rest (list 1))
(load-file "SICP.clj")
(deep-reverse x)
(load-file "SICP.clj")
(deep-reverse x)
(def x (list (list 1 2) (list 3 4)))
(deep-reverse x)
x
(load-file "SICP.clj")
(deep-reverse x)
(cdr x)
(def x (cons 1 2))
x
(deep-reverse x)
(rest 1)
(load-file "SICP.clj")
(deep-reverse x)
(load-file "SICP.clj")
(deep-reverse x)
x
(rest 1)
(rest (first (list 1)))
(empty? (list ))
(empty? 1)
(list (list ))
(load-file "SICP.clj")
(deep-reverse x)
(load-file "SICP.clj")
(deep-reverse x)
(for-each square (list ))
x
(def x (list (list 1 2) (list 3 4))
(def x (list (list 1 2) (list 3 4)))
)
(def x (list (list 1 2) (list 3 4)))
x
(= x (cons (cons 1 (cons 2 nil)) (cons (cons 3 (cons 4 nil)) nil)))
(cons 1 (2))
(cons 1 2)
(cons 1)
(cons 1 nil)
(cons 1 (cons 2 nil))
quit
